using CleanArchitecture.Domain.Abstractions;  // Para usar Result y Result<T>
using MediatR;                                // Para usar IRequest

namespace CleanArchitecture.Application.Abstractions.Messaging;

/// <summary>
/// Contrato base para definir un comando (command) en el patr√≥n CQRS.
/// Un comando representa una operaci√≥n que **modifica el estado del sistema**
/// y devuelve un <see cref="Result"/> indicando si fue exitosa.
/// </summary>
public interface ICommand : IRequest<Result>, IBaseCommand
{
    // üìù Hereda de IRequest<Result> para integrarse con MediatR,
    // lo que permite enviar el comando a trav√©s de _mediator.Send(...)
    // Tambi√©n implementa la interfaz vac√≠a IBaseCommand para
    // dar consistencia entre los contratos.
}

/// <summary>
/// Contrato base para definir un comando (command) en el patr√≥n CQRS
/// que devuelve un valor adicional adem√°s del resultado de √©xito/error.
/// </summary>
/// <typeparam name="TResponse">
/// Tipo de dato que devuelve el comando si es exitoso.
/// </typeparam>
public interface ICommand<TResponse> : IRequest<Result<TResponse>>, IBaseCommand
{
    // üìù Igual que ICommand simple, pero para cuando el comando
    // tambi√©n devuelve datos al completarse.
}

/// <summary>
/// Marcador para todos los comandos de la aplicaci√≥n.
/// No contiene miembros por s√≠ misma, pero permite tratar
/// todos los comandos de manera uniforme.
/// </summary>
public interface IBaseCommand
{
    // üìù Esta interfaz vac√≠a act√∫a como "marcador",
    // √∫til si en alg√∫n momento quieres hacer validaciones,
    // filtros o procesamiento adicional a todos los comandos
    // sin importar si son con o sin respuesta.
}
