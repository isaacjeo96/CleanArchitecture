namespace CleanArchitecture.Application;

/// <summary>
/// Clase est√°tica de configuraci√≥n para registrar todos los servicios
/// necesarios dentro de la capa de aplicaci√≥n. Esto incluye casos de uso,
/// servicios de dominio (como PrecioService) y herramientas como MediatR.
/// </summary>
public static class DependencyInjection
{
    /// <summary>
    /// M√©todo de extensi√≥n que permite registrar los servicios de la capa Application
    /// en el contenedor de inyecci√≥n de dependencias (IServiceCollection).
    /// </summary>
    /// <param name="services">
    /// Contenedor de servicios donde se registrar√°n las dependencias.
    /// </param>
    /// <returns>
    /// El mismo contenedor <see cref="IServiceCollection"/> con las dependencias registradas.
    /// </returns>
    public static IServiceCollection AddApplication(this IServiceCollection services)
    {
        // üëâ Registra todos los handlers de MediatR que est√©n en este ensamblado (Application)
        services.AddMediatR(configuration =>
        {
            // ‚úÖ Usa reflexi√≥n para buscar todas las clases que implementan interfaces de MediatR
            // como IRequestHandler<T>, INotificationHandler<T>, etc.
            configuration.RegisterServicesFromAssembly(typeof(DependencyInjection).Assembly);
        });

        // üëâ Registra el servicio PrecioService con un ciclo de vida Transient
        // Esto significa que se crear√° una nueva instancia cada vez que se solicite
        services.AddTransient<PrecioService>();

        // üîÅ Devuelve el contenedor ya modificado para que pueda seguir encaden√°ndose si se desea
        return services;
    }
}
